@page "/thefool"

@attribute [StreamRendering]
@attribute [Authorize]

@rendermode InteractiveServer

@inject PlayerControlService playerControl
@inject FoolGameService FoolGameService
@inject NavigationManager NavigationManager

<PageTitle>Дурак</PageTitle>

@if (FoolGameService.CountOfGames == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Карточная игра "Дурак"</h1>
    <h2>Партия № @FoolGameService.CountOfGames</h2>

    @if (FoolGameService.Player.IsAttack)
    {
        <h4>Ходит игрок:@FoolGameService.Player.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
    }
    else
    {
        <h4>Ходит игрок:@FoolGameService.Opponent.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
    }

    <div class="game-table">
        <div class="opponent-cards">
            <Opponent opponent="FoolGameService.Opponent" />
        </div>

        <div class="player-cards">
            <PlayerHand player="FoolGameService.Player" table="FoolGameService.Table" />
        </div>


        <div class="center-table">
            @if (FoolGameService.AttackingCards.Count > 0)
            {
                <div class="attacking-cards">
                    @foreach (var card in FoolGameService.AttackingCards)
                    {
                        if (card.ImageUrl != "")
                        {
                            <img src="@card.ImageUrl" class="attacking-card" />
                        }
                    }
                </div>
            }

            @if (FoolGameService.DefendingCards.Count > 0)
            {
                <div class="defending-cards">
                    @foreach (var card in FoolGameService.DefendingCards)
                    {
                        if (card.ImageUrl != "")
                        {
                            <img src="@card.ImageUrl" class="defending-card" />
                        }
                    }
                </div>
            }

            @if (FoolGameService.gameState == GameState.Finished)
            {
                <div class="win-lose">
                    @if (FoolGameService.Player.inHand.Count == 0 && FoolGameService.Opponent.inHand.Count == 0)
                    {
                        <label class="draw">Ничья!</label>
                    }
                    else if (FoolGameService.Player.inHand.Count == 0)
                    {
                        <label class="win">Поздравляем! Бот остался в дураках :)</label>
                    }
                    else if (FoolGameService.Opponent.inHand.Count == 0)
                    {
                        <label class="lose">Увы, вы дурак :(</label>
                    }
                </div>
            }
        </div>

        <div class="deck">
            <GameDeck deck="FoolGameService.Deck" />
        </div>

        @if (!FoolGameService.FirstTurn)
        {
            <div class="discard-pile">
                <DiscardPile deck="FoolGameService.Deck" opponent="FoolGameService.Opponent" player="FoolGameService.Player"
                    discardCardCount="FoolGameService.discardCardCount" />
            </div>
        }


        <div class="controls">
            <button class="start-button" @onclick="StartTurn" disabled="@IsLoaded">@StartButton</button>
            <button class="play-button" @onclick="Play" disabled="@(!CanPlay)">@PlayButton</button>
            <button class="draw-button" @onclick="DrawCards" disabled="@(!CanDraw)">Взять карты</button>
            <button class="end-button" @onclick="EndTurn" disabled="@(!CanEndTurn)">Завершить ход</button>
        </div>
    </div>

    <TheFoolRules />
}

@code {
    private bool IsLoaded = false;
    private bool CanPlay = true;
    private bool CanDraw = false;
    private bool CanEndTurn = false;
    private string PlayButton = "Походить";
    private string StartButton = "Новая игра";

    @* protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (FoolGameService.gameState == GameState.Loading)
            {
                await Task.Delay(500);

                FoolGameService.LoadGame();

                RefreshPlayButtonName();

                if (FoolGameService.Player.IsAttack)
                {
                    IsLoaded = true;
                }
                else
                {
                    CanPlay = false;
                }
            }
        }
    } *@
    protected override async Task OnInitializedAsync()
    {
        if (FoolGameService.gameState == GameState.Loading)
        {
            await Task.Delay(500);

            FoolGameService.LoadGame();

            RefreshPlayButtonName();

            if (FoolGameService.Player.IsAttack)
            {
                IsLoaded = true;
            }
            else
            {
                CanPlay = false;
            }
        }
    }
    private void RefreshStartButton()
    {
        if (FoolGameService.gameState == GameState.Finished || FoolGameService.gameState == GameState.JustStarted)
        {
            IsLoaded = false;
            CanPlay = false;
        }
        else if (FoolGameService.gameState == GameState.InProgress)
        {
            IsLoaded = true;
            CanPlay = true;
        }
    }

    private async Task DrawCards()
    {
        if (FoolGameService.AttackingCards.Count != FoolGameService.DefendingCards.Count)
        {
            playerControl.TakeCards(FoolGameService.Table, FoolGameService.Player);
            FoolGameService.Player.inHand = FoolGameService.Player.inHand.Distinct().ToList();

            await EndTurn();
        }
    }
    private async Task EndTurn()
    {
        if (FoolGameService.FirstTurn)
        {
            FoolGameService.FirstTurn = false;
        }

        if ((FoolGameService.Player.Taken || FoolGameService.Table.Length() % 2 == 1) && !FoolGameService.Opponent.Taken)
        {
            playerControl.TakeCards(FoolGameService.Table, FoolGameService.Player);
        }

        if (FoolGameService.Table.Length() != 0 || FoolGameService.Opponent.Taken)
        {
            if (!FoolGameService.Player.Taken && !FoolGameService.Opponent.Taken)
            {
                FoolGameService.discardCardCount += FoolGameService.Table.Length();
            }

            FoolGameService.EndCurrentTurn();

            RefreshPlayButtonName();

            CanEndTurn = false;

            if (FoolGameService.Player.IsAttack)
            {
                FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);
            }

            if (!FoolGameService.Player.IsAttack && FoolGameService.Player.inHand.Count != 0)
            {
                if (FoolGameService.gameState != GameState.Finished)
                {
                    await Task.Delay(500);
                    StartTurn();
                }
            }
        }

        RefreshStartButton();

        CanPlay = true;

        if (FoolGameService.Player.IsAttack)
        {
            CanDraw = false;
        }
        else
        {
            CanDraw = true;
        }
    }

    private void RefreshPlayButtonName()
    {
        if (FoolGameService.Player.IsAttack)
        {
            if (FoolGameService.AttackingCards.Count == 0)
                PlayButton = "Походить";
            else
                PlayButton = "Подкинуть";
        }
        else
        {
            PlayButton = "Отбиться";
        }
    }

    private void StartTurn()
    {
        //reload game
        if (FoolGameService.gameState == GameState.Finished)
        {
            var count = FoolGameService.CountOfGames;
            FoolGameService.LoadGame();
            FoolGameService.CountOfGames += count;
        }

        //reset start game parameters

        RefreshPlayButtonName();

        FoolGameService.gameState = GameState.InProgress;

        RefreshStartButton();

        //start attack if first turn is bot's
        if (!FoolGameService.Player.IsAttack)
        {
            Card attackingCard = FoolGameService.Opponent.Attack(FoolGameService.Table);

            if (attackingCard.ImageUrl != "")
            {
                FoolGameService.AttackingCards.Add(attackingCard);
                CanDraw = true;
            }

            FoolGameService.Player.RefreshPlayableForBeat(attackingCard, FoolGameService.Table);
        }
        //refresh playable cards if first turn is player's
        else
        {
            FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);
        }
    }

    private void CheckNonPlayable()
    {
        //checking state of cards for setting enable property for "Play" button
        var nonPlayable = 0;

        foreach (var card in FoolGameService.Player.inHand)
        {
            if (!card.IsPlayable)
            {
                nonPlayable++;
            }
        }

        if (nonPlayable == FoolGameService.Player.inHand.Count)
        {
            CanPlay = false;
        }
    }

    //method-controller for attack/defend in game
    private async Task Play()
    {
        //refresh start properties for game
        FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);

        RefreshPlayButtonName();

        //player attack
        if (FoolGameService.Player.IsAttack && FoolGameService.Opponent.inHand.Count != 0)
        {
            //check first turn discards can't be more than ten
            if (FoolGameService.FirstTurn && FoolGameService.Table.Length() == 10)
            {
                FoolGameService.FirstTurn = false;
                await EndTurn();
            }

            //choose attacking card
            Card attackingCard = FoolGameService.Player.Attack(FoolGameService.Table);

            //if attacking card exists
            if (attackingCard.ImageUrl != "")
            {
                //add to center table
                FoolGameService.AttackingCards.Add(attackingCard);

                RefreshPlayButtonName();

                //bot's defense
                await Task.Delay(500);

                Card defendingCard = FoolGameService.Opponent.Defend(attackingCard, FoolGameService.Table);

                //if defending card exists
                if (defendingCard.ImageUrl != "")
                {
                    //add to center table
                    FoolGameService.DefendingCards.Add(defendingCard);

                    //refresh enable property for "EndTurn" button
                    if (FoolGameService.Table.Length() % 2 == 0)
                    {
                        CanEndTurn = true;
                        CanDraw = false;
                    }
                }
            }


            FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);

            CheckNonPlayable();

            //end turn if opponent taken
            if (FoolGameService.Opponent.Taken)
            {
                await EndTurn();
                FoolGameService.Opponent.IsAttack = false;
                FoolGameService.Player.IsAttack = true;
            }
        }

        //bot's attack
        else
        {
            //getting card for player defense if attacking card exists
            if (FoolGameService.Table.Length() % 2 == 1)
            {
                Card attackingCard = FoolGameService.AttackingCards.Last();

                if (attackingCard.ImageUrl != "")
                {
                    CanDraw = true;
                    CanPlay = true;

                    Card defendingCard = FoolGameService.Player.Defend(attackingCard, FoolGameService.Table);

                    //defense if attacking card exists
                    if (defendingCard.ImageUrl != "")
                    {
                        FoolGameService.DefendingCards.Add(defendingCard);

                        //refresh enable property for "EndTurn" button
                        if (FoolGameService.Table.Length() % 2 == 0)
                        {
                            CanEndTurn = true;
                            CanDraw = false;
                            CanPlay = false;
                        }
                    }
                }

                FoolGameService.Player.RefreshPlayableForBeat(attackingCard, FoolGameService.Table);

                CheckNonPlayable();
            }

            //checking count of discards for first turn can't be more than ten
            if (FoolGameService.FirstTurn && FoolGameService.Table.Length() == 10)
            {
                FoolGameService.FirstTurn = false;
                await EndTurn();
            }

            //all the attacking card defend, not max count of cards on table, player had cards in hand, player not taken
            if (FoolGameService.Table.Length() % 2 == 0
            && FoolGameService.Table.Length() != 12
            && FoolGameService.Player.inHand.Count != 0
            && !FoolGameService.Player.Taken)
            {
                //bot's attack
                Card attackingCard = FoolGameService.Opponent.Attack(FoolGameService.Table);

                await Task.Delay(500);

                if (attackingCard.ImageUrl != "")
                {
                    //add attacking card to center table if exists
                    FoolGameService.AttackingCards.Add(attackingCard);
                    CanDraw = true;
                    CanPlay = true;
                }
                else
                {
                    //refresh enable properties for buttons "Play" and "DrawCards"
                    CanPlay = false;
                    CanDraw = false;
                }

                FoolGameService.Player.RefreshPlayableForBeat(attackingCard, FoolGameService.Table);

                CheckNonPlayable();
            }

            //player taken
            if (FoolGameService.Player.Taken)
            {
                FoolGameService.Opponent.IsAttack = true;
                FoolGameService.Player.IsAttack = false;
            }

        }
    }
}