@page "/thefool"
@rendermode InteractiveServer

@inject PlayerControlService playerControl
@inject FoolGameService FoolGameService

<PageTitle>Дурак</PageTitle>


<h1>Карточная игра "Дурак"</h1>
<h2>Партия № @FoolGameService.CountOfGames</h2>

@if (FoolGameService.Player.IsAttack)
{
    <h4>Ходит игрок:@FoolGameService.Player.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
}
else
{
    <h4>Ходит игрок:@FoolGameService.Opponent.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
}

<div class="game-table">
    <div class="opponent-cards">
        <Opponent opponent="FoolGameService.Opponent" />
    </div>

    <div class="player-cards">
        <PlayerHand player="FoolGameService.Player" table="FoolGameService.Table" />
    </div>


    <div class="center-table">
        @if (FoolGameService.AttackingCards.Count > 0)
        {
            <div class="attacking-cards">
                @foreach (var card in FoolGameService.AttackingCards)
                {
                    if (card.ImageUrl != "")
                    {
                        <img src="@card.ImageUrl" class="attacking-card" />
                    }
                }
            </div>
        }

        @if (FoolGameService.DefendingCards.Count > 0)
        {
            <div class="defending-cards">
                @foreach (var card in FoolGameService.DefendingCards)
                {
                    if (card.ImageUrl != "")
                    {
                        <img src="@card.ImageUrl" class="defending-card" />
                    }
                }
            </div>
        }

        @if (FoolGameService.gameState == GameState.Finished)
        {
            <div class="win-lose">
                @if (FoolGameService.Player.inHand.Count == 0)
                {
                    <label class="win">Поздравляем! Бот остался в дураках :)</label>
                }
                else
                {
                    <label class="lose">Увы, вы дурак :(</label>
                }
            </div>
        }
    </div>

    <div class="deck">
        <GameDeck deck="FoolGameService.Deck" />
    </div>

    <div class="discard-pile">
        <DiscardPile deck="FoolGameService.Deck" opponent="FoolGameService.Opponent" player="FoolGameService.Player" />
    </div>

    <div class="controls">
        <button @onclick="StartTurn">Начать ход</button>
        <button @onclick="Play" disabled="@(!isAttack)">@PlayButton</button>
        <button @onclick="DrawCards">Взять карты</button>
        <button @onclick="EndTurn">Завершить ход</button>
    </div>
</div>

<TheFoolRules />

@code {
    private bool isAttack = true;
    private string PlayButton = string.Empty;
    protected override void OnInitialized()
    {
        FoolGameService.LoadGame();

        PlayButton = RefreshPlayButtonName();
    }

    private void SelectPlayerCard(Card card)
    {
        if (card.IsPlayable && FoolGameService.Player.IsAttack)
        {
            if (FoolGameService.Player.CanBeSelected(FoolGameService.Table))
            {
                card.IsSelected = !card.IsSelected;
                FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);
            }
        }

        if (!FoolGameService.Player.IsAttack)
        {
            SelectCardToBeat(card);
            FoolGameService.Player.RefreshPlayableForBeat(card);
        }
    }

    private void SelectCardToBeat(Card card)
    {
        card.IsCanToBeat = !card.IsCanToBeat;

        FoolGameService.Player.RefreshPlayableForBeat(card);

        foreach (var cardToBeat in FoolGameService.DefendingCards)
        {
            if (cardToBeat == card)
            {
                continue;
            }

            cardToBeat.IsCanToBeat = true;
        }
    }

    private void DrawCards()
    {
        if (FoolGameService.AttackingCards.Count != FoolGameService.DefendingCards.Count)
        {
            playerControl.TakeCards(FoolGameService.Table, FoolGameService.Player);
            EndTurn();
        }

    }
    private void EndTurn()
    {
        FoolGameService.RefreshTurnQueue();

        FoolGameService.AttackingCards.Clear();
        FoolGameService.DefendingCards.Clear();

        FoolGameService.Player.Taken = false;
        FoolGameService.Opponent.Taken = false;

        foreach (var card in FoolGameService.Player.inHand)
        {
            card.IsSelected = false;
            card.IsCanToBeat = true;
        }

        isAttack = true;

        FoolGameService.Table.ClearTable();

        FoolGameService.RefillHands();

        PlayButton = RefreshPlayButtonName();

        if (FoolGameService.Player.inHand.Count == 0 || FoolGameService.Opponent.inHand.Count == 0)
        {
            FoolGameService.gameState = GameState.Finished;
        }
    }

    private string RefreshPlayButtonName()
    {
        if (FoolGameService.Player.IsAttack)
        {
            if (FoolGameService.AttackingCards.Count == 0)
                return "Походить";
            else
                return "Подкинуть";
        }
        else
        {
            return "Отбиться";
        }

    }

    private void StartTurn()
    {
        PlayButton = RefreshPlayButtonName();

        if (!FoolGameService.Player.IsAttack)
        {
            Card attackingCard = FoolGameService.Opponent.Attack(FoolGameService.Table);
            if (attackingCard.ImageUrl != "")
            {
                FoolGameService.AttackingCards.Add(attackingCard);
            }

            FoolGameService.Player.RefreshPlayableForBeat(attackingCard);
        }
    }
    private void Play()
    {
        FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);
        PlayButton = RefreshPlayButtonName();

        if (FoolGameService.Player.IsAttack)
        {
            Card attackingCard = FoolGameService.Player.Attack(FoolGameService.Table);

            if (attackingCard.ImageUrl != "")
            {
                PlayButton = RefreshPlayButtonName();

                FoolGameService.AttackingCards.Add(attackingCard);

                Card defendingCard = FoolGameService.Opponent.Defend(attackingCard, FoolGameService.Table);

                if (defendingCard.ImageUrl != "")
                {
                    FoolGameService.DefendingCards.Add(defendingCard);
                }
            }

            FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);

            if (FoolGameService.Opponent.Taken)
            {
                EndTurn();
                FoolGameService.Opponent.IsAttack = false;
                FoolGameService.Player.IsAttack = true;
            }
        }
        else
        {
            if (FoolGameService.Table.Length() == 0 || FoolGameService.Table.Length() % 2 == 1)
            {
                Card attackingCard = FoolGameService.AttackingCards.Last();

                if (attackingCard.ImageUrl != "")
                {
                    Card defendingCard = FoolGameService.Player.Defend(attackingCard, FoolGameService.Table);

                    if (defendingCard.ImageUrl != "")
                    {
                        FoolGameService.DefendingCards.Add(defendingCard);
                    }

                }

                FoolGameService.Player.RefreshPlayableForBeat(attackingCard);

            }

            if (FoolGameService.Player.Taken)
            {
                FoolGameService.Opponent.IsAttack = true;
                FoolGameService.Player.IsAttack = false;
            }
        }
    }
}