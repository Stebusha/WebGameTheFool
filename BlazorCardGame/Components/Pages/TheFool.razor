@page "/thefool"
@rendermode InteractiveServer

@inject PlayerControlService playerControl
@inject FoolGameService FoolGameService

<PageTitle>Дурак</PageTitle>


<h1>Карточная игра "Дурак"</h1>
<h2>Партия № @FoolGameService.CountOfGames</h2>

<div class="game-table">
    <div class="opponent-cards">
        <Opponent opponent="FoolGameService.Opponent" />
    </div>

    <div class="player-cards">
        <PlayerHand player="FoolGameService.Player" table="FoolGameService.Table" />
    </div>

    @if (isAttack)
    {
        <div class="center-table">
            @if (FoolGameService.AttackingCards.Count > 0)
            {
                <div class="attacking-cards">
                    @foreach (var card in FoolGameService.AttackingCards)
                    {
                        <img src="@card.ImageUrl" class="attacking-card" @onclick="() => SelectCardToBeat(card)"
                            style="cursor:pointer; 
                            @(!card.IsCanToBeat ? "background-color:teal; border-radius: 5%; border: 5px solid teal;"  : "")" />
                    }
                </div>
            }

            @if (FoolGameService.DefendingCards.Count > 0)
            {
                <div class="defending-cards">
                    @foreach (var card in FoolGameService.DefendingCards)
                    {
                        <img src="@card.ImageUrl" class="defending-card" />
                    }
                </div>
            }
        </div>
    }

    <div class="deck">
        <GameDeck deck="FoolGameService.Deck" />
    </div>

    <div class="controls">
        <button @onclick="StartTurn">Начать ход</button>
        <button @onclick="Play" disabled="@(!isAttack)">@PlayButton</button>
        <button @onclick="DrawCards">Взять карты</button>
        <button @onclick="EndTurn">Завершить ход</button>
    </div>
</div>

@code {
    private bool isAttack = true;
    private string PlayButton = string.Empty;
    protected override void OnInitialized()
    {
        FoolGameService.LoadGame();

        PlayButton = RefreshPlayButtonName();
    }

    private void SelectPlayerCard(Card card)
    {
        if (card.IsPlayable && FoolGameService.Player.IsAttack)
        {
            if (FoolGameService.Player.CanBeSelected(FoolGameService.Table))
            {
                card.IsSelected = !card.IsSelected;
                FoolGameService.Player.RefreshPlayable();
            }
        }

    }

    private void SelectCardToBeat(Card card)
    {
        card.IsCanToBeat = !card.IsCanToBeat;

        FoolGameService.Player.RefreshPlayableForBeat(card);

        foreach (var cardToBeat in FoolGameService.DefendingCards)
        {
            if (cardToBeat == card)
            {
                continue;
            }

            cardToBeat.IsCanToBeat = true;
        }


    }

    private void DrawCards()
    {

        playerControl.TakeCards(FoolGameService.Table, FoolGameService.Player);
        EndTurn();
    }
    private void EndTurn()
    {
        FoolGameService.AttackingCards.Clear();
        FoolGameService.DefendingCards.Clear();

        FoolGameService.Player.Taken = false;
        FoolGameService.Opponent.Taken = false;

        foreach (var card in FoolGameService.Player.inHand)
        {
            card.IsSelected = false;
            card.IsCanToBeat = true;
        }


        isAttack = true;


        FoolGameService.Table.ClearTable();


        FoolGameService.Player.RefillHand(FoolGameService.Deck);
        FoolGameService.Player.IsAttack = !FoolGameService.Player.IsAttack;

        FoolGameService.Opponent.RefillHand(FoolGameService.Deck);
        FoolGameService.Opponent.IsAttack = !FoolGameService.Opponent.IsAttack;

        PlayButton = RefreshPlayButtonName();

    }

    private string RefreshPlayButtonName()
    {
        if (FoolGameService.Player.IsAttack)
        {
            if (FoolGameService.AttackingCards.Count == 0)
                return "Походить";
            else
                return "Подкинуть";
        }
        else
        {
            return "Отбиться";
        }

    }

    private void StartTurn()
    {
        PlayButton = RefreshPlayButtonName();

        if (!FoolGameService.Player.IsAttack)
        {
            Card attackingCard = FoolGameService.Opponent.Attack(FoolGameService.Table);

            FoolGameService.AttackingCards.Add(attackingCard);
            FoolGameService.Player.RefreshPlayableForBeat(attackingCard);
        }
    }
    private void Play()
    {
        if (FoolGameService.Player.IsAttack)
        {
            
            Card attackingCard = FoolGameService.Player.Attack(FoolGameService.Table);
            FoolGameService.AttackingCards.Add(attackingCard);
            FoolGameService.Player.RefreshPlayable();
            Card defendingCard = FoolGameService.Opponent.Defend(attackingCard, FoolGameService.Table);
            FoolGameService.DefendingCards.Add(defendingCard);

            if(FoolGameService.Opponent.Taken){
                EndTurn();
                FoolGameService.Opponent.IsAttack = false;
                FoolGameService.Player.IsAttack = true;
            }
        }
        else
        {

            Card attackingCard = FoolGameService.AttackingCards.ElementAt(FoolGameService.AttackingCards.Count - 1);

            Card defendingCard = FoolGameService.Player.Defend(attackingCard, FoolGameService.Table);
            FoolGameService.DefendingCards.Add(defendingCard);

            if(FoolGameService.Player.Taken){
                FoolGameService.Opponent.IsAttack = true;
                FoolGameService.Player.IsAttack = false;
            }
        }

    }
}

<TheFoolRules />