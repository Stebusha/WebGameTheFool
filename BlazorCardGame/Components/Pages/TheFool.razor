@page "/thefool"
@rendermode InteractiveServer

@inject PlayerControlService playerControl

<PageTitle>Дурак</PageTitle>


<h1>Карточная игра "Дурак"</h1>
<h2>Партия № @countOfGames</h2>

<div class="game-table">
    <div class="opponent-cards">
        <Opponent opponent="opponent" />
    </div>

    <div class="player-cards">
        <PlayerHand player="player" table="table" />
    </div>

    @if (isAttack)
    {
        <div class="center-table">
            @if (AttackingCards.Count > 0)
            {
                <div class="attacking-cards">
                    @foreach (var card in AttackingCards)
                    {
                        <img src="@card.ImageUrl" class="attacking-card" @onclick="() => SelectCardToBeat(card)"
                            style="cursor:pointer; 
                            @(!card.IsCanToBeat ? "background-color:teal; border-radius: 5%; border: 5px solid teal;"  : "")" />
                    }
                </div>
            }

            @if (DefendingCards.Count > 0)
            {
                <div class="defending-cards">
                    @foreach (var card in DefendingCards)
                    {
                        <img src="@card.ImageUrl" class="defending-card" />
                    }
                </div>
            }
        </div>
    }

    <div class="deck">
        <GameDeck deck="deck" />
    </div>

    <div class="controls">
        <button @onclick="Play" disabled="@(!isAttack)">@PlayButton</button>
        <button @onclick="DrawCards">Взять карты</button>
        <button @onclick="EndTurn">Завершить ход</button>
    </div>
</div>

@code {
    private bool isAttack = true;
    Player? player;
    AIPlayer? opponent;
    Deck? deck;
    private Table table = new Table();
    private int countOfGames = 0;
    private string PlayButton = "Походить";
    private List<Card> AttackingCards { get; set; } = new List<Card>();
    private List<Card> DefendingCards { get; set; } = new List<Card>();
    protected override void OnInitialized()
    {
        countOfGames++;

        deck = new Deck();
        deck.Shuffle();
        deck.Trump();

        player = new Player();
        opponent = new AIPlayer();

        player.RefillHand(deck);
        opponent.RefillHand(deck);
    }
    private void SelectPlayerCard(Card card)
    {
        if (card.IsPlayable && player != null && player.IsAttack)
        {
            if (player.CanBeSelected(table))
            {
                card.IsSelected = !card.IsSelected;
                player.RefreshPlayable();
            }
        }
    }

    private void SelectCardToBeat(Card card)
    {
        card.IsCanToBeat = !card.IsCanToBeat;

        if (player != null && !player.IsAttack)
            player.RefreshPlayableForBeat(card);

    }

    private void DrawCards()
    {
        if (player != null && table != null)
        {
            playerControl.TakeCards(table, ref player);
        }

        EndTurn();

    }
    private void EndTurn()
    {
        AttackingCards.Clear();
        DefendingCards.Clear();

        if (player != null)
        {
            foreach (var card in player.inHand)
            {
                card.IsSelected = false;
                card.IsCanToBeat = true;
            }
        }

        isAttack = true;
        PlayButton = "Походить";

        table.ClearTable();

        if (player != null && deck != null && opponent != null)
        {
            player.RefillHand(deck);
            player.IsAttack = !player.IsAttack;

            opponent.RefillHand(deck);
            opponent.IsAttack = !opponent.IsAttack;
        }

    }
    private void Play()
    {
        if (player != null && opponent != null)
        {
            if (!isAttack)
            {
                foreach (var card in player.inHand)
                {
                    if (card.IsPlayable)
                    {
                        isAttack = true;
                        break;
                    }
                }

            }

            DefendingCards.AddRange(player.Attack(table));
            AttackingCards.Add(opponent.Attack(table));

            if (AttackingCards.Count == 0)
            {
                PlayButton = "Походить";
            }
            else
            {
                PlayButton = "Подкинуть";
            }

            player.IsAttack = false;
        }
    }
}

<TheFoolRules />