@page "/thefool"

@attribute [StreamRendering]
@attribute [Authorize]

@rendermode @(new InteractiveServerRenderMode(false))

@inject FoolGameService FoolGameService
@inject NavigationManager NavigationManager
@inject DataManager DataManager

<PageTitle>Дурак</PageTitle>

@if (FoolGameService.GameState == GameState.Loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <ConfirmDialog Show="ShowSettings" OnOK="SetGame">
        <h3>Выберите настройки игры</h3>

        <select class="deck-style" @onchange="OnStyleSelected">
            <option value="">Стиль колоды</option>

            @foreach (var style in Enum.GetNames(typeof(DeckStyle)))
            {
                <option value="@style">@GetStyleName(style)</option>
            }
        </select>

    </ConfirmDialog>

    if (!ShowSettings)
    {
        <h1>Карточная игра "Дурак"</h1>
        <h2>Партия № @FoolGameService.CountOfGames</h2>

        @if (FoolGameService.Player.IsAttack)
        {
            <h4>Ходит игрок:@FoolGameService.Player.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
        }
        else
        {
            <h4>Ходит игрок:@FoolGameService.Opponent.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
        }

        <div class="game-table">
            <div class="opponent-cards">
                <Opponent opponent="FoolGameService.Opponent" />
            </div>

            <div class="player-cards">
                <PlayerHand player="FoolGameService.Player" table="FoolGameService.Table" />
            </div>

            <div class="center-table">
                @if (FoolGameService.AttackingCards.Count > 0)
                {
                    <div class="attacking-cards">
                        @foreach (var card in FoolGameService.AttackingCards)
                        {
                            if (card.ImageUrl != "")
                            {
                                <img src="@card.ImageUrl" class="attacking-card" />
                            }
                        }
                    </div>
                }

                @if (FoolGameService.DefendingCards.Count > 0)
                {
                    <div class="defending-cards">
                        @foreach (var card in FoolGameService.DefendingCards)
                        {
                            if (card.ImageUrl != "")
                            {
                                <img src="@card.ImageUrl" class="defending-card" />
                            }
                        }
                    </div>
                }

                @if (FoolGameService.GameState == GameState.Finished)
                {
                    <div class="win-lose">
                        @if (FoolGameService.Player.inHand.Count == 0 && FoolGameService.Opponent.inHand.Count == 0)
                        {
                            <label class="draw">Ничья!</label>
                        }
                        else if (FoolGameService.Player.inHand.Count == 0)
                        {
                            <label class="win">Поздравляем! Бот остался в дураках :)</label>
                        }
                        else if (FoolGameService.Opponent.inHand.Count == 0)
                        {
                            <label class="lose">Увы, вы дурак :(</label>
                        }
                    </div>
                }
            </div>

            <div class="deck">
                <GameDeck deck="FoolGameService.Deck" />
            </div>

            @if (!FoolGameService.FirstTurn)
            {
                <div class="discard-pile">
                    <DiscardPile deck="FoolGameService.Deck" opponent="FoolGameService.Opponent" player="FoolGameService.Player"
                        discardCardCount="FoolGameService.DiscardCardCount" />
                </div>
            }

            <div class="controls">
                <button class="start-button" @onclick="StartTurn"
                    disabled="@FoolGameService.IsLoaded">@FoolGameService.StartButton</button>
                <button class="play-button" @onclick="Play"
                    disabled="@(!FoolGameService.CanPlay)">@FoolGameService.PlayButton</button>
                <button class="draw-button" @onclick="DrawCards" disabled="@(!FoolGameService.CanDraw)">Взять карты</button>
                <button class="end-button" @onclick="EndTurn" disabled="@(!FoolGameService.CanEndTurn)">Завершить ход</button>
            </div>
        </div>

        <TheFoolRules />
    }
}

@code {
    private bool ShowSettings = false;
    private List<FoolGameScore>? scores;
    private List<ApplicationUser>? players;

    //load game on initialized component
    protected override async Task OnInitializedAsync()
    {
        if (FoolGameService.GameState == GameState.Loading)
        {
            await Task.Delay(500);

            ShowSettings = true;
            FoolGameService.LoadGame();

            if (scores is null)
            {
                try
                {
                    scores = await DataManager.GetAllScoresAsync();
                    players = await DataManager.GetAllUsersAsync();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                bool opponentExisted = false;

                if (players is not null)
                {
                    foreach (var player in players)
                    {
                        if (FoolGameService.Opponent.Name == player.Login)
                        {
                            opponentExisted = true;
                        }
                    }
                }

                if (!opponentExisted)
                {
                    var opponent = new ApplicationUser
                        {
                            Login = FoolGameService.Opponent.Name,
                            Password = "admin",
                            @* IsAttack = FoolGameService.Opponent.IsAttack *@
                        };

                    try
                    {
                        await DataManager.AddUserAsync(opponent);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }
                }
                else
                {
                    var opponent = await DataManager.GetUserByLoginAsync(FoolGameService.Opponent.Name);

                    if (opponent is not null)
                    {
                        @* opponent.IsAttack = FoolGameService.Opponent.IsAttack; *@

                        try
                        {
                            await DataManager.UpdateUserAsync(opponent);
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.Message);
                        }
                    }
                }
            }
        }
    }

    private string GetStyleName(string style) => style switch
    {
        "Fantasy" => "Фэнтези",
        "Standard" => "Стандартный",
        _ => "Style Not Found"
    };

    private void OnStyleSelected(ChangeEventArgs e)
    {
        if (e.Value?.ToString() != "")
        {
            FoolGameService.Deck.ChangeStyle(e.Value?.ToString() ?? "Fantasy");
        }
    }
    private void SetGame()
    {
        ShowSettings = false;
        Console.WriteLine(FoolGameService.Deck.GetDeckStyle());
    }
    private async Task AddScores(string playerName, string opponentName)
    {
        var scorePlayer = new FoolGameScore
            {
                UserLogin = playerName,
                NumberOfWins = 1,
                CountOfGames = 1,
                NumberOfDraws = 0,
                NumberOfLosses = 0
            };

        var scoreOpponent = new FoolGameScore
            {
                UserLogin = opponentName,
                NumberOfLosses = 1,
                CountOfGames = 1,
                NumberOfDraws = 0,
                NumberOfWins = 0
            };

        try
        {
            await DataManager.AddScoresAsync(scorePlayer, scoreOpponent);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }
    private async Task AddDraws(string playerName, string opponentName)
    {
        var scorePlayer = new FoolGameScore
            {
                UserLogin = playerName,
                NumberOfDraws = 1,
                CountOfGames = 1,
                NumberOfLosses = 0,
                NumberOfWins = 0
            };

        var scoreOpponent = new FoolGameScore
            {
                UserLogin = opponentName,
                NumberOfDraws = 1,
                CountOfGames = 1,
                NumberOfLosses = 0,
                NumberOfWins = 0
            };

        try
        {
            await DataManager.AddScoresAsync(scorePlayer, scoreOpponent);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task AddDraw(string Name)
    {
        var score = new FoolGameScore
            {
                UserLogin = Name,
                NumberOfDraws = 1,
                CountOfGames = 1,
                NumberOfLosses = 0,
                NumberOfWins = 0
            };
        
        try
        {
            await DataManager.AddScoreAsync(score);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    private async Task UpdateDraws(string playerName, string opponentName)
    {
        var scorePlayer = await DataManager.GetScoreByLoginAsync(playerName);
        var scoreOpponent = await DataManager.GetScoreByLoginAsync(opponentName);

        if (scorePlayer is not null && scoreOpponent is not null)
        {
            scorePlayer.NumberOfDraws++;
            scorePlayer.CountOfGames++;

            scoreOpponent.NumberOfDraws++;
            scoreOpponent.CountOfGames++;

            try
            {
                await DataManager.UpdateScoresAsync(scorePlayer, scoreOpponent);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

        }
    }

    private async Task UpdateDraw(string Name)
    {
        var score = await DataManager.GetScoreByLoginAsync(Name);

        if (score is not null)
        {
            score.NumberOfDraws++;
            score.CountOfGames++;

            score.NumberOfDraws++;
            score.CountOfGames++;

            try
            {
                await DataManager.UpdateScoreAsync(score);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

        }
    }
    private async Task UpdateScoresForWins(string name, FoolGameScore score)
    {
        score.NumberOfWins++;
        score.CountOfGames++;

        try
        {
            await DataManager.UpdateScoreAsync(score);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        var scoreOpponent = new FoolGameScore
            {
                UserLogin = name,
                CountOfGames = 1,
                NumberOfLosses = 1,
                NumberOfWins = 0,
                NumberOfDraws = 0
            };

        try
        {
            await DataManager.AddScoreAsync(scoreOpponent);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    private async Task UpdateScoresForLose(string name, FoolGameScore score)
    {
        score.NumberOfLosses++;
        score.CountOfGames++;

        try
        {
            await DataManager.UpdateScoreAsync(score);

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        var scoreOpponent = new FoolGameScore
            {
                UserLogin = name,
                CountOfGames = 1,
                NumberOfWins = 1,
                NumberOfLosses = 0,
                NumberOfDraws = 0
            };

        try
        {
            await DataManager.AddScoreAsync(scoreOpponent);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
    private async Task SetScore()
    {
        if (FoolGameService.GameState == GameState.Finished)
        {
            bool playerExist = false;
            bool opponentExist = false;

            if (scores is not null)
            {
                foreach (var score in scores)
                {
                    if (FoolGameService.Player.Name == score.UserLogin)
                    {
                        playerExist = true;
                    }

                    if (FoolGameService.Opponent.Name == score.UserLogin)
                    {
                        opponentExist = true;
                    }

                    if (opponentExist && playerExist)
                    {
                        break;
                    }
                }

                if (!playerExist && !opponentExist)
                {
                    if (!FoolGameService.Player.IsFool && FoolGameService.Opponent.IsFool)
                    {
                        await AddScores(FoolGameService.Player.Name, FoolGameService.Opponent.Name);
                    }
                    else if (FoolGameService.Player.IsFool && !FoolGameService.Opponent.IsFool)
                    {
                        await AddScores(FoolGameService.Opponent.Name, FoolGameService.Player.Name);
                    }
                    else
                    {
                        await AddDraws(FoolGameService.Player.Name, FoolGameService.Opponent.Name);
                    }
                }
                else if (playerExist && !opponentExist)
                {
                    if (!FoolGameService.Player.IsFool && FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.UserLogin == FoolGameService.Player.Name)
                            {
                                await UpdateScoresForWins(FoolGameService.Opponent.Name, score);
                                break;
                            }
                        }
                    }
                    else if (FoolGameService.Player.IsFool && !FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.UserLogin == FoolGameService.Player.Name)
                            {
                                await UpdateScoresForLose(FoolGameService.Opponent.Name, score);
                                break;
                            }
                        }
                    }
                    else
                    {
                        await AddDraw(FoolGameService.Opponent.Name);
                        await UpdateDraw(FoolGameService.Player.Name);
                    }
                }
                else if (!playerExist && opponentExist)
                {
                    if (!FoolGameService.Player.IsFool && FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.UserLogin == FoolGameService.Opponent.Name)
                            {
                                await UpdateScoresForWins(FoolGameService.Player.Name, score);
                                break;
                            }
                        }
                    }
                    else if (FoolGameService.Player.IsFool && !FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.UserLogin == FoolGameService.Opponent.Name)
                            {
                                await UpdateScoresForLose(FoolGameService.Player.Name, score);
                                break;
                            }
                        }
                    }
                    else
                    {
                        await AddDraw(FoolGameService.Player.Name);
                        await UpdateDraw(FoolGameService.Opponent.Name);
                    }
                }
                else
                {
                    if (!FoolGameService.Player.IsFool && FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.UserLogin == FoolGameService.Player.Name)
                            {
                                score.NumberOfWins++;
                                score.CountOfGames++;

                                try
                                {
                                    await DataManager.UpdateScoreAsync(score);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine(e.Message);
                                }

                            }

                            if (score.UserLogin == FoolGameService.Opponent.Name)
                            {
                                score.NumberOfLosses++;
                                score.CountOfGames++;

                                try
                                {
                                    await DataManager.UpdateScoreAsync(score);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine(e.Message);
                                }
                            }
                        }
                    }
                    else if (FoolGameService.Player.IsFool && !FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.UserLogin == FoolGameService.Player.Name)
                            {
                                score.NumberOfLosses++;
                                score.CountOfGames++;

                                try
                                {
                                    await DataManager.UpdateScoreAsync(score);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine(e.Message);
                                }
                            }

                            if (score.UserLogin == FoolGameService.Opponent.Name)
                            {
                                score.NumberOfWins++;
                                score.CountOfGames++;

                                try
                                {
                                    await DataManager.UpdateScoreAsync(score);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine(e.Message);
                                }
                            }
                        }
                    }
                    else
                    {
                        await UpdateDraws(FoolGameService.Player.Name, FoolGameService.Opponent.Name);
                    }
                }
            }
        }
    }

    //method for player draw cards from table
    private async Task DrawCards()
    {
        if (FoolGameService.AttackingCards.Count != FoolGameService.DefendingCards.Count)
        {
            FoolGameService.Player.TakeCards(FoolGameService.Table);
            await EndTurn();
        }
    }

    //end turn
    private async Task EndTurn()
    {
        //if table not empty or bot taken
        if (FoolGameService.Table.Length() != 0 || FoolGameService.Opponent.Taken)
        {
            //method to end current turn, refresh turn properties
            FoolGameService.EndCurrentTurn();

            if (FoolGameService.GameState == GameState.Finished)
            {
                scores?.Clear();

                try
                {
                    scores = await DataManager.GetAllScoresAsync();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                await SetScore();
            }
            //if bot's turn - start turn if game not finished
            else if (!FoolGameService.Player.IsAttack && FoolGameService.Player.inHand.Count != 0)
            {
                await Task.Delay(500);
                StartTurn();
            }
        }
    }

    //start turn
    private void StartTurn()
    {
        //reload game
        if (FoolGameService.GameState == GameState.Finished)
        {
            FoolGameService.LoadGame();
        }

        //reset start game parameters
        FoolGameService.StartCurrentTurn();
    }

    //method-controller for attack/defend in game
    private async Task Play()
    {
        //launch turn
        await FoolGameService.Turn();

        //checking count of discards for first turn can't be more than ten
        if (FoolGameService.FirstTurn && FoolGameService.Table.Length() == 10)
        {
            FoolGameService.FirstTurn = false;

            await EndTurn();

            if (FoolGameService.Opponent.Taken)
            {
                FoolGameService.Opponent.IsAttack = false;
                FoolGameService.Player.IsAttack = true;
            }
        }

        //end turn if opponent taken
        else if (FoolGameService.Opponent.Taken)
        {
            await EndTurn();

            FoolGameService.Opponent.IsAttack = false;
            FoolGameService.Player.IsAttack = true;
        }
    }
}