@page "/thefool"

@attribute [StreamRendering]
@attribute [Authorize]

@rendermode @(new InteractiveServerRenderMode(false))

@inject FoolGameService FoolGameService
@inject NavigationManager NavigationManager

<PageTitle>Дурак</PageTitle>

@if (FoolGameService.gameState == GameState.Loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Карточная игра "Дурак"</h1>
    <h2>Партия № @FoolGameService.CountOfGames</h2>

    @if (FoolGameService.Player.IsAttack)
    {
        <h4>Ходит игрок:@FoolGameService.Player.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
    }
    else
    {
        <h4>Ходит игрок:@FoolGameService.Opponent.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
    }

    <div class="game-table">
        <div class="opponent-cards">
            <Opponent opponent="FoolGameService.Opponent" />
        </div>

        <div class="player-cards">
            <PlayerHand player="FoolGameService.Player" table="FoolGameService.Table" />
        </div>

        <div class="center-table">
            @if (FoolGameService.AttackingCards.Count > 0)
            {
                <div class="attacking-cards">
                    @foreach (var card in FoolGameService.AttackingCards)
                    {
                        if (card.ImageUrl != "")
                        {
                            <img src="@card.ImageUrl" class="attacking-card" />
                        }
                    }
                </div>
            }

            @if (FoolGameService.DefendingCards.Count > 0)
            {
                <div class="defending-cards">
                    @foreach (var card in FoolGameService.DefendingCards)
                    {
                        if (card.ImageUrl != "")
                        {
                            <img src="@card.ImageUrl" class="defending-card" />
                        }
                    }
                </div>
            }

            @if (FoolGameService.gameState == GameState.Finished)
            {
                <div class="win-lose">
                    @if (FoolGameService.Player.inHand.Count == 0 && FoolGameService.Opponent.inHand.Count == 0)
                    {
                        <label class="draw">Ничья!</label>
                    }
                    else if (FoolGameService.Player.inHand.Count == 0)
                    {
                        <label class="win">Поздравляем! Бот остался в дураках :)</label>
                    }
                    else if (FoolGameService.Opponent.inHand.Count == 0)
                    {
                        <label class="lose">Увы, вы дурак :(</label>
                    }
                </div>
            }
        </div>

        <div class="deck">
            <GameDeck deck="FoolGameService.Deck" />
        </div>

        @if (!FoolGameService.FirstTurn)
        {
            <div class="discard-pile">
                <DiscardPile deck="FoolGameService.Deck" opponent="FoolGameService.Opponent" player="FoolGameService.Player"
                    discardCardCount="FoolGameService.discardCardCount" />
            </div>
        }

        <div class="controls">
            <button class="start-button" @onclick="StartTurn"
                disabled="@FoolGameService.IsLoaded">@FoolGameService.StartButton</button>
            <button class="play-button" @onclick="Play"
                disabled="@(!FoolGameService.CanPlay)">@FoolGameService.PlayButton</button>
            <button class="draw-button" @onclick="DrawCards" disabled="@(!FoolGameService.CanDraw)">Взять карты</button>
            <button class="end-button" @onclick="EndTurn" disabled="@(!FoolGameService.CanEndTurn)">Завершить ход</button>
        </div>
    </div>

    <TheFoolRules />
}

@code {
    protected override async Task OnInitializedAsync()
    {
        if (FoolGameService.gameState == GameState.Loading)
        {
            await Task.Delay(500);

            FoolGameService.LoadGame();
        }
    }
    private async Task DrawCards()
    {
        if (FoolGameService.AttackingCards.Count != FoolGameService.DefendingCards.Count)
        {
            FoolGameService.Player.TakeCards(FoolGameService.Table);
            await EndTurn();
        }
    }
    private async Task EndTurn()
    {
        //if table not empty or bot taken
        if (FoolGameService.Table.Length() != 0 || FoolGameService.Opponent.Taken)
        {
            //method to end current turn, refresh turn properties
            FoolGameService.EndCurrentTurn();

            //if bot's turn - start turn if game not finished
            if (!FoolGameService.Player.IsAttack && FoolGameService.Player.inHand.Count != 0)
            {
                if (FoolGameService.gameState != GameState.Finished)
                {
                    await Task.Delay(500);
                    StartTurn();
                }
            }
        }
    }

    private void StartTurn()
    {
        //reload game
        if (FoolGameService.gameState == GameState.Finished)
        {
            FoolGameService.LoadGame();
        }
        
        //reset start game parameters
        FoolGameService.StartCurrentTurn();
    }

    //method-controller for attack/defend in game
    private async Task Play()
    {
        await FoolGameService.Turn();
        //checking count of discards for first turn can't be more than ten
        if (FoolGameService.FirstTurn && FoolGameService.Table.Length() == 10)
        {
            FoolGameService.FirstTurn = false;

            await EndTurn();

            if (FoolGameService.Opponent.Taken)
            {
                FoolGameService.Opponent.IsAttack = false;
                FoolGameService.Player.IsAttack = true;
            }
        }

        //end turn if opponent taken
        else if (FoolGameService.Opponent.Taken)
        {
            await EndTurn();

            FoolGameService.Opponent.IsAttack = false;
            FoolGameService.Player.IsAttack = true;
        }
    }
}