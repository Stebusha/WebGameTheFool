@page "/thefool"

@attribute [StreamRendering]
@attribute [Authorize]

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject FoolGameService FoolGameService
@inject NavigationManager NavigationManager
@inject FoolDataManager DataManager

@implements IDisposable

<PageTitle>Дурак</PageTitle>

@if(FoolGameService.GameState == GameState.Settings)
{
    <ConfirmDialog Show="ShowSettings" OnOK="SetGame">
        <h3>Выберите настройки игры</h3>
        <br />
        <select class="deck-style" @onchange="OnStyleSelected">
            <option value="">Стиль колоды</option>

            @foreach (var style in Enum.GetNames(typeof(DeckStyle)))
            {
                <option value="@style">@GetStyleName(style)</option>
            }
        </select>
        <br />

        <div>
            <p>Рубашка:</p>

            <InputRadioGroup @bind-Value="selectedBack">
                <div class="container-back">
                    @foreach (var back in backs)
                    {
                        <div class="back-element">
                            <img class="selection-back" src="@back" /> 
                            <InputRadio Value="@back" />
                        </div>
                    
                    }   
                </div>
                
            </InputRadioGroup>
        </div>
        <br />
        <div>
            <h6>Количество карт в колоде:</h6>

            <InputRadioGroup @bind-Value="selectedCardsAmount">

                <InputRadio Value="GameConstants.MAX_CARD_AMOUNT_STANDARD" />
                36

                <InputRadio Value="GameConstants.MAX_CARD_AMOUNT_EXTENDED" />
                54

            </InputRadioGroup>

            
        </div>

    </ConfirmDialog>
}
else if (FoolGameService.GameState == GameState.Loading)
{
    <p><em>Loading...</em></p>
}
else
{
    if (!ShowSettings)
    {
        <h1>Карточная игра "Дурак"</h1>
        <h2>Партия № @FoolGameService.CountOfGames</h2>

        @if (FoolGameService.Player.IsAttack)
        {
            <h4>Ходит игрок:@FoolGameService.Player.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
        }
        else
        {
            <h4>Ходит игрок:@FoolGameService.Opponent.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
        }

        <div class="game-table">
            <div class="opponent-cards">
                <Opponent opponent="FoolGameService.Opponent" />
            </div>

            <div class="player-cards">
                <PlayerHand player="FoolGameService.Player" table="FoolGameService.Table" />
            </div>

            <div class="center-table">
                @if (FoolGameService.AttackingCards.Count > 0)
                {
                    <div class="attacking-cards">
                        @foreach (var card in FoolGameService.AttackingCards)
                        {
                            if (card.ImageUrl != "")
                            {
                                <img src="@card.ImageUrl" class="attacking-card" />
                            }
                        }
                    </div>
                }

                @if (FoolGameService.DefendingCards.Count > 0)
                {
                    <div class="defending-cards">
                        @foreach (var card in FoolGameService.DefendingCards)
                        {
                            if (card.ImageUrl != "")
                            {
                                <img src="@card.ImageUrl" class="defending-card" />
                            }
                        }
                    </div>
                }

                @if (FoolGameService.GameState == GameState.Finished)
                {
                    <div class="win-lose">
                        @if (FoolGameService.Player.inHand.Count == 0 && FoolGameService.Opponent.inHand.Count == 0)
                        {
                            <label class="draw">Ничья!</label>
                        }
                        else if (FoolGameService.Player.inHand.Count == 0)
                        {
                            <label class="win">Поздравляем! Бот остался в дураках :)</label>
                        }
                        else if (FoolGameService.Opponent.inHand.Count == 0)
                        {
                            <label class="lose">Увы, вы дурак :(</label>
                        }
                    </div>
                }
            </div>

            <div class="deck">
                <GameDeck deck="FoolGameService.Deck" />
            </div>

            @if (!FoolGameService.FirstTurn)
            {
                <div class="discard-pile">
                    <DiscardPile deck="FoolGameService.Deck" opponent="FoolGameService.Opponent" player="FoolGameService.Player"
                        discardCardCount="FoolGameService.DiscardCardCount" />
                </div>
            }

            <div class="controls">
                <button class="start-button" @onclick="StartTurn"
                    disabled="@FoolGameService.IsLoaded">@FoolGameService.StartButton</button>
                <button class="play-button" @onclick="Play"
                    disabled="@(!FoolGameService.CanPlay)">@FoolGameService.PlayButton</button>
                <button class="draw-button" @onclick="DrawCards" disabled="@(!FoolGameService.CanDraw)">Взять карты</button>
                <button class="end-button" @onclick="EndTurn" disabled="@(!FoolGameService.CanEndTurn)">Завершить ход</button>
            </div>
        </div>

        <TheFoolRules />

        <button class="exit-button" @onclick="Logout">Выйти</button>
        <br />
        <br />
    }
}


@code {
    private List<string> backs =
    [
        "Images/back_cyan.png",
        "Images/back_black1.png",
        "Images/back_blue.png",
        "Images/back_green.png",
        "Images/back_orange.png",
        "Images/back_red.png",
        "Images/back_purple.png"
    ];

    private string selectedBack = "Images/back_cyan.png";
    private int selectedCardsAmount = GameConstants.MAX_CARD_AMOUNT_STANDARD;
    private bool ShowSettings = false;
    private List<FoolGameScore>? scores;
    private List<ApplicationUser>? users;
    private List<PlayerInfo>? players;

    //load game on initialized component
    protected override async Task OnInitializedAsync()
    {
        if(FoolGameService.GameState == GameState.Settings)
        {
            await Task.Delay(500);

            //choose game settings
            ShowSettings = true;
        }
    }

    //get deck's style name
    private string GetStyleName(string style) => style switch
    {
        "Fantasy" => "Фэнтези",
        "White" => "Светлый",
        "Black" => "Темный",
        _ => "Style Not Found"
    };

    //change deck style based on selected value
    private void OnStyleSelected(ChangeEventArgs e)
    {
        if (e.Value?.ToString() != "")
        {
            FoolGameService.Deck.ChangeStyle(e.Value?.ToString() ?? "Fantasy");
        }
    }

    private async Task SetGame()
    {
        ShowSettings = false;
        Deck.s_back = selectedBack;
        
        if(selectedCardsAmount == GameConstants.MAX_CARD_AMOUNT_EXTENDED)
        {
            Deck.UseExtra = true;
        }

        Console.WriteLine($"Стиль колоды: {Deck.s_style}\n Рубашка: {Deck.s_back}\n Количество карт в колоде: {selectedCardsAmount}\n");

        FoolGameService.SetStateLoading();

        await Task.Delay(500);

        //load game
        FoolGameService.LoadGame();
        //if info not loaded from db
        if (scores is null)
        {
            //try load info from db
            try
            {
                scores = await DataManager.GetAllScoresAsync();
                users = await DataManager.GetAllUsersAsync();
                players = await DataManager.GetAllPlayersAsync();
            }
            catch (Exception e)
            {
                Console.WriteLine("Error line 151-153\n" + e.Message);
            }

            bool opponentExisted = false;
            bool playerExisted = false;

            //checked existed players or opponent
            if (players is not null && users is not null)
            {
                foreach (var user in users)
                {
                    if (user.IsLoggedIn)
                    {
                        FoolGameService.Player.Name = user.Login;
                        break;
                    }
                }

                foreach (var player in players)
                {
                    if (FoolGameService.Opponent.Name == player.Name)
                    {
                        opponentExisted = true;
                    }

                    if (FoolGameService.Player.Name == player.Name)
                    {
                        playerExisted = true;
                    }

                    if (playerExisted && opponentExisted)
                    {
                        break;
                    }
                }
            }
            //add info of opponent to db
            if (!opponentExisted)
            {
                var opponent = new PlayerInfo
                    {
                        Name = FoolGameService.Opponent.Name,
                        IsAttack = FoolGameService.Opponent.IsAttack,
                        PlayerType = PlayerType.AI
                    };

                try
                {
                    await DataManager.AddPlayerAsync(opponent);

                    players?.Clear();
                    await DataManager.GetAllPlayersAsync();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error line 202\n" + e.Message);
                }
            }
            //update info in db if opponent existed
            else
            {
                var opponent = await DataManager.GetPlayerByNameAsync(FoolGameService.Opponent.Name);

                if (opponent is not null)
                {
                    opponent.IsAttack = FoolGameService.Opponent.IsAttack;

                    try
                    {
                        await DataManager.UpdatePlayerAsync(opponent);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Error line 223\n" + e.Message);
                    }
                }
            }
            //add info to db if player is new
            if (!playerExisted)
            {
                if (users is not null)
                {
                    foreach (var user in users)
                    {
                        if (user.IsLoggedIn)
                        {
                            FoolGameService.Player.Name = user.Login;
                            break;
                        }
                    }
                }

                var player = new PlayerInfo
                    {
                        Name = FoolGameService.Player.Name,
                        IsAttack = FoolGameService.Player.IsAttack,
                        PlayerType = PlayerType.Human,
                        UserLogin = FoolGameService.Player.Name
                    };

                try
                {
                    await DataManager.AddPlayerAsync(player);
                    playerExisted = true;

                    players?.Clear();
                    await DataManager.GetAllPlayersAsync();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error line 256-260\n" + e.Message);
                }
            }
            //update info in db if player is existed
            else
            {
                var player = await DataManager.GetPlayerByNameAsync(FoolGameService.Player.Name);

                if (player is not null)
                {
                    player.IsAttack = FoolGameService.Player.IsAttack;

                    try
                    {
                        await DataManager.UpdatePlayerAsync(player);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Error line 278\n" + e.Message);
                    }
                }
            }
        } 
    }

    //add two scores info to db
    private async Task AddScores(string playerName, string opponentName)
    {
        var scorePlayer = new FoolGameScore
            {
                PlayerInfoName = playerName,
                NumberOfWins = 1,
                CountOfGames = 1,
                NumberOfDraws = 0,
                NumberOfLosses = 0
            };

        var scoreOpponent = new FoolGameScore
            {
                PlayerInfoName = opponentName,
                NumberOfLosses = 1,
                CountOfGames = 1,
                NumberOfDraws = 0,
                NumberOfWins = 0
            };

        try
        {
            await DataManager.AddScoresAsync(scorePlayer, scoreOpponent);
        }
        catch (Exception e)
        {
            Console.WriteLine("Error line 336\n" + e.Message);
        }

    }

    //add two scores info to db for draw
    private async Task AddDraws(string playerName, string opponentName)
    {
        var scorePlayer = new FoolGameScore
            {
                PlayerInfoName = playerName,
                NumberOfDraws = 1,
                CountOfGames = 1,
                NumberOfLosses = 0,
                NumberOfWins = 0
            };

        var scoreOpponent = new FoolGameScore
            {
                PlayerInfoName = opponentName,
                NumberOfDraws = 1,
                CountOfGames = 1,
                NumberOfLosses = 0,
                NumberOfWins = 0
            };

        try
        {
            await DataManager.AddScoresAsync(scorePlayer, scoreOpponent);
        }
        catch (Exception e)
        {
            Console.WriteLine("Error line 368\n" + e.Message);
        }
    }

    //add info about one draw to db
    private async Task AddDraw(string Name)
    {
        var score = new FoolGameScore
            {
                PlayerInfoName = Name,
                NumberOfDraws = 1,
                CountOfGames = 1,
                NumberOfLosses = 0,
                NumberOfWins = 0
            };

        try
        {
            await DataManager.AddScoreAsync(score);
        }
        catch (Exception e)
        {
            Console.WriteLine("Error line 390\n" + e.Message);
        }
    }

    //update info about two draws in db
    private async Task UpdateDraws(string playerName, string opponentName)
    {
        var scorePlayer = await DataManager.GetScoreByNameAsync(playerName);
        var scoreOpponent = await DataManager.GetScoreByNameAsync(opponentName);

        if (scorePlayer is not null && scoreOpponent is not null)
        {
            scorePlayer.NumberOfDraws++;
            scorePlayer.CountOfGames++;

            scoreOpponent.NumberOfDraws++;
            scoreOpponent.CountOfGames++;

            try
            {
                await DataManager.UpdateScoresAsync(scorePlayer, scoreOpponent);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error line 414\n" + e.Message);
            }
        }
    }

    //update info about one draw in db
    private async Task UpdateDraw(string Name)
    {
        var score = await DataManager.GetScoreByNameAsync(Name);

        if (score is not null)
        {
            score.NumberOfDraws++;
            score.CountOfGames++;

            score.NumberOfDraws++;
            score.CountOfGames++;

            try
            {
                await DataManager.UpdateScoreAsync(score);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error line 439\n" + e.Message);
            }

        }
    }

    //update scores info in db for wins
    private async Task UpdateScoresForWins(string name, FoolGameScore score)
    {
        score.NumberOfLosses++;
        score.CountOfGames++;

        try
        {
            await DataManager.UpdateScoreAsync(score);
        }
        catch (Exception e)
        {
            Console.WriteLine("Error line 457\n" + e.Message);
        }

        var scoreOpponent = new FoolGameScore
            {
                PlayerInfoName = name,
                CountOfGames = 1,
                NumberOfLosses = 0,
                NumberOfWins = 1,
                NumberOfDraws = 0
            };

        try
        {
            await DataManager.AddScoreAsync(scoreOpponent);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    //update scores info in db for lose
    private async Task UpdateScoresForLose(string name, FoolGameScore score)
    {
        score.NumberOfWins++;
        score.CountOfGames++;

        try
        {
            await DataManager.UpdateScoreAsync(score);
        }
        catch (Exception e)
        {
            Console.WriteLine("Error line 491\n" + e.Message);
        }

        var scoreOpponent = new FoolGameScore
            {
                PlayerInfoName = name,
                CountOfGames = 1,
                NumberOfWins = 0,
                NumberOfLosses = 1,
                NumberOfDraws = 0
            };

        try
        {
            await DataManager.AddScoreAsync(scoreOpponent);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    //set scores in db
    private async Task SetScore()
    {
        //checked game finished
        if (FoolGameService.GameState == GameState.Finished)
        {
            bool playerExist = false;
            bool opponentExist = false;

            //if scores existed
            if (scores is not null)
            {
                //check existed of player and opponent
                foreach (var score in scores)
                {
                    if (FoolGameService.Player.Name == score.PlayerInfoName)
                    {
                        playerExist = true;
                    }

                    if (FoolGameService.Opponent.Name == score.PlayerInfoName)
                    {
                        opponentExist = true;
                    }

                    if (opponentExist && playerExist)
                    {
                        break;
                    }
                }

                //add scores if player and opponent is new
                if (!playerExist && !opponentExist)
                {
                    if (!FoolGameService.Player.IsFool && FoolGameService.Opponent.IsFool)
                    {
                        await AddScores(FoolGameService.Player.Name, FoolGameService.Opponent.Name);
                    }
                    else if (FoolGameService.Player.IsFool && !FoolGameService.Opponent.IsFool)
                    {
                        await AddScores(FoolGameService.Opponent.Name, FoolGameService.Player.Name);
                    }
                    else
                    {
                        await AddDraws(FoolGameService.Player.Name, FoolGameService.Opponent.Name);
                    }
                }
                //add scores if player existed and opponent not existed
                else if (playerExist && !opponentExist)
                {
                    if (!FoolGameService.Player.IsFool && FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.PlayerInfoName == FoolGameService.Player.Name)
                            {
                                await UpdateScoresForLose(FoolGameService.Opponent.Name, score);
                                break;
                            }
                        }
                    }
                    else if (FoolGameService.Player.IsFool && !FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.PlayerInfoName == FoolGameService.Player.Name)
                            {

                                await UpdateScoresForWins(FoolGameService.Opponent.Name, score);
                                break;
                            }
                        }
                    }
                    else
                    {
                        await AddDraw(FoolGameService.Opponent.Name);
                        await UpdateDraw(FoolGameService.Player.Name);
                    }
                }
                //add scores if player not existed and opponent existed
                else if (!playerExist && opponentExist)
                {
                    if (!FoolGameService.Player.IsFool && FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.PlayerInfoName == FoolGameService.Opponent.Name)
                            {
                                await UpdateScoresForWins(FoolGameService.Player.Name, score);
                                break;
                            }
                        }
                    }
                    else if (FoolGameService.Player.IsFool && !FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.PlayerInfoName == FoolGameService.Opponent.Name)
                            {
                                await UpdateScoresForLose(FoolGameService.Player.Name, score);
                                break;
                            }
                        }
                    }
                    else
                    {
                        await AddDraw(FoolGameService.Player.Name);
                        await UpdateDraw(FoolGameService.Opponent.Name);
                    }
                }
                //add scores if player and opponent both existed
                else
                {
                    if (!FoolGameService.Player.IsFool && FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.PlayerInfoName == FoolGameService.Player.Name)
                            {
                                score.NumberOfWins++;
                                score.CountOfGames++;

                                try
                                {
                                    await DataManager.UpdateScoreAsync(score);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine("Error line 641\n" + e.Message);
                                }

                            }

                            if (score.PlayerInfoName == FoolGameService.Opponent.Name)
                            {
                                score.NumberOfLosses++;
                                score.CountOfGames++;

                                try
                                {
                                    await DataManager.UpdateScoreAsync(score);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine("Error line 657\n" + e.Message);
                                }
                            }
                        }
                    }
                    else if (FoolGameService.Player.IsFool && !FoolGameService.Opponent.IsFool)
                    {
                        foreach (var score in scores)
                        {
                            if (score.PlayerInfoName == FoolGameService.Player.Name)
                            {
                                score.NumberOfLosses++;
                                score.CountOfGames++;

                                try
                                {
                                    await DataManager.UpdateScoreAsync(score);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine("Error line 677\n" + e.Message);
                                }
                            }

                            if (score.PlayerInfoName == FoolGameService.Opponent.Name)
                            {
                                score.NumberOfWins++;
                                score.CountOfGames++;

                                try
                                {
                                    await DataManager.UpdateScoreAsync(score);
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine("Error line 692\n" + e.Message);
                                }
                            }
                        }
                    }
                    else
                    {
                        await UpdateDraws(FoolGameService.Player.Name, FoolGameService.Opponent.Name);
                    }
                }
            }
        }
    }

    //method for player draw cards from table
    private async Task DrawCards()
    {
        if (FoolGameService.AttackingCards.Count != FoolGameService.DefendingCards.Count)
        {
            FoolGameService.Player.TakeCards(FoolGameService.Table);
            await EndTurn();
        }
    }

    //end turn
    private async Task EndTurn()
    {
        //if table not empty or bot taken
        if (FoolGameService.Table.Length() != 0 || FoolGameService.Opponent.Taken)
        {
            //method to end current turn, refresh turn properties
            FoolGameService.EndCurrentTurn();

            if (FoolGameService.GameState == GameState.Finished)
            {
                scores?.Clear();

                try
                {
                    scores = await DataManager.GetAllScoresAsync();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error line 748\n" + e.Message);
                }

                await SetScore();
            }
            //if bot's turn - start turn if game not finished
            else if (!FoolGameService.Player.IsAttack && FoolGameService.Player.inHand.Count != 0)
            {
                await Task.Delay(500);
                StartTurn();
            }
        }
    }

    //start turn
    private void StartTurn()
    {
        //reload game
        if (FoolGameService.GameState == GameState.Finished)
        {
            FoolGameService.LoadGame();
        }

        //reset start game parameters
        FoolGameService.StartCurrentTurn();
    }

    //method-controller for attack/defend in game
    private async Task Play()
    {
        //launch turn
        await FoolGameService.Turn();

        //checking count of discards for first turn can't be more than ten
        if (FoolGameService.FirstTurn && FoolGameService.Table.Length() == 10)
        {
            FoolGameService.FirstTurn = false;

            await EndTurn();

            if (FoolGameService.Opponent.Taken)
            {
                FoolGameService.Opponent.IsAttack = false;
                FoolGameService.Player.IsAttack = true;
            }
        }

        //end turn if opponent taken
        else if (FoolGameService.Opponent.Taken)
        {
            await EndTurn();

            FoolGameService.Opponent.IsAttack = false;
            FoolGameService.Player.IsAttack = true;
        }
    }

    private void Logout()
    {
        FoolGameService.ResetGame();
        NavigationManager.NavigateTo("/logout");
    }

    public void Dispose()
    {
        @* Reload = true; *@
        selectedBack = Deck.s_back;
        
        if(Deck.UseExtra)
        {
            selectedCardsAmount = GameConstants.MAX_CARD_AMOUNT_EXTENDED;
        }
        else
        {
            selectedCardsAmount = GameConstants.MAX_CARD_AMOUNT_STANDARD;
        }

        @* deckStyle = Deck.s_style; *@
    } 
     //save game info
    @* public async Task SaveGame()
    {
        List<CardInfo> cards = new();

        //remember info about cards in player hands
        foreach (var card in FoolGameService.Player.inHand)
        {
            var cardInfo = new CardInfo
                {
                    CardType = CardType.Player,
                    ImageUrl = card.ImageUrl
                };

            cards.Add(cardInfo);
        }

        //remember info about cards in opponent hand
        foreach (var card in FoolGameService.Opponent.inHand)
        {
            var cardInfo = new CardInfo
                {
                    CardType = CardType.Opponent,
                    ImageUrl = card.ImageUrl
                };

            cards.Add(cardInfo);
        }

        //remember info about cards in deck
        foreach (var card in FoolGameService.Deck.GetDeckCards())
        {
            var cardInfo = new CardInfo
                {
                    CardType = CardType.InDeck,
                    ImageUrl = card.ImageUrl
                };

            if (card == FoolGameService.Deck.GetTrumpCard())
            {
                cardInfo.CardType = CardType.Trump;
            }

            cards.Add(cardInfo);
        }

        //remember info about cards in attack
        foreach (var card in FoolGameService.AttackingCards)
        {
            var cardInfo = new CardInfo
                {
                    CardType = CardType.Attacking,
                    ImageUrl = card.ImageUrl
                };

            cards.Add(cardInfo);
        }

        //remember info about cards in defend
        foreach (var card in FoolGameService.DefendingCards)
        {
            var cardInfo = new CardInfo
                {
                    CardType = CardType.Defending,
                    ImageUrl = card.ImageUrl
                };

            cards.Add(cardInfo);
        }

        //if game not existed create new info about it
        if (game is null)
        {
            game = new FoolGame
                {
                    Cards = cards,
                    CountOfGames = FoolGameService.CountOfGames,
                    DiscardCardsCount = FoolGameService.DiscardCardCount,
                    OpponentInfoName = FoolGameService.Opponent.Name,
                    PlayerInfoName = FoolGameService.Player.Name
                };

            try
            {
                await DataManager.AddGameAsync(game);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error line 790\n" + e.Message);
            }
        }
        //update info if game existed
        else
        {
            game.Cards = cards;
            game.PlayerInfoName = FoolGameService.Player.Name;
            game.OpponentInfoName = FoolGameService.Opponent.Name;
            game.CountOfGames = FoolGameService.CountOfGames;
            game.DiscardCardsCount = FoolGameService.DiscardCardCount;

            try
            {
                await DataManager.UpdateGameAsync(game);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error line 808\n" + e.Message);
            }
        }
    }  *@
}