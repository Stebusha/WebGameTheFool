@page "/thefool"

@attribute [StreamRendering]
@attribute [Authorize]

@rendermode InteractiveServer

@inject PlayerControlService playerControl
@inject FoolGameService FoolGameService
@inject NavigationManager NavigationManager

<PageTitle>Дурак</PageTitle>

@if (FoolGameService.CountOfGames == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Карточная игра "Дурак"</h1>
    <h2>Партия № @FoolGameService.CountOfGames</h2>

    @if (FoolGameService.Player.IsAttack)
    {
        <h4>Ходит игрок:@FoolGameService.Player.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
    }
    else
    {
        <h4>Ходит игрок:@FoolGameService.Opponent.Name <br />Карт в колоде осталось:@FoolGameService.Deck.CardsAmount</h4>
    }

    <div class="game-table">
        <div class="opponent-cards">
            <Opponent opponent="FoolGameService.Opponent" />
        </div>

        <div class="player-cards">
            <PlayerHand player="FoolGameService.Player" table="FoolGameService.Table" />
        </div>


        <div class="center-table">
            @if (FoolGameService.AttackingCards.Count > 0)
            {
                <div class="attacking-cards">
                    @foreach (var card in FoolGameService.AttackingCards)
                    {
                        if (card.ImageUrl != "")
                        {
                            <img src="@card.ImageUrl" class="attacking-card" />
                        }
                    }
                </div>
            }

            @if (FoolGameService.DefendingCards.Count > 0)
            {
                <div class="defending-cards">
                    @foreach (var card in FoolGameService.DefendingCards)
                    {
                        if (card.ImageUrl != "")
                        {
                            <img src="@card.ImageUrl" class="defending-card" />
                        }
                    }
                </div>
            }

            @if (FoolGameService.gameState == GameState.Finished)
            {
                <div class="win-lose">
                    @if (FoolGameService.Player.inHand.Count == 0 && FoolGameService.Opponent.inHand.Count == 0)
                    {
                        <label class="draw">Ничья!</label>
                    }
                    else if (FoolGameService.Player.inHand.Count == 0)
                    {
                        <label class="win">Поздравляем! Бот остался в дураках :)</label>
                    }
                    else if (FoolGameService.Opponent.inHand.Count == 0)
                    {
                        <label class="lose">Увы, вы дурак :(</label>
                    }
                </div>
            }
        </div>

        <div class="deck">
            <GameDeck deck="FoolGameService.Deck" />
        </div>

        @if (!FoolGameService.FirstTurn)
        {
            <div class="discard-pile">
                <DiscardPile deck="FoolGameService.Deck" opponent="FoolGameService.Opponent" player="FoolGameService.Player"
                    discardCardCount="FoolGameService.discardCardCount" />
            </div>
        }


        <div class="controls">
            <button @onclick="StartTurn" disabled="@IsLoaded">@StartButton</button>
            <button @onclick="Play">@PlayButton</button>
            <button @onclick="DrawCards">Взять карты</button>
            <button @onclick="EndTurn">Завершить ход</button>
        </div>
    </div>

    <TheFoolRules />
}

@code {

    private bool IsLoaded = false;
    private string PlayButton = string.Empty;
    private string StartButton = "Новая игра";
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        FoolGameService.LoadGame();
        RefreshPlayButtonName();

        if(FoolGameService.Player.IsAttack){
            IsLoaded = true;
        }
    }
    private void RefreshStartButtonText()
    {
        if (FoolGameService.gameState == GameState.Finished || FoolGameService.gameState == GameState.JustStarted)
        {
            StartButton = "Новая игра";

            IsLoaded = false;
        }
        else if (FoolGameService.gameState == GameState.InProgress)
        {
            IsLoaded = true;
        }
    }

    private async Task DrawCards()
    {
        if (FoolGameService.AttackingCards.Count != FoolGameService.DefendingCards.Count)
        {
            playerControl.TakeCards(FoolGameService.Table, FoolGameService.Player);
            FoolGameService.Player.inHand = FoolGameService.Player.inHand.Distinct().ToList();

            await EndTurn();
        }
    }
    private async Task EndTurn()
    {
        if (FoolGameService.FirstTurn)
        {
            FoolGameService.FirstTurn = false;
        }

        if ((FoolGameService.Player.Taken || FoolGameService.Table.Length() % 2 == 1) && !FoolGameService.Opponent.Taken)
        {
            playerControl.TakeCards(FoolGameService.Table, FoolGameService.Player);
        }

        if (FoolGameService.Table.Length() != 0 || FoolGameService.Opponent.Taken)
        {
            if (!FoolGameService.Player.Taken && !FoolGameService.Opponent.Taken)
            {
                FoolGameService.discardCardCount += FoolGameService.Table.Length();
            }

            FoolGameService.EndCurrentTurn();

            RefreshPlayButtonName();

            if (FoolGameService.Player.IsAttack)
            {
                FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);
            }

            if (!FoolGameService.Player.IsAttack && FoolGameService.Player.inHand.Count != 0)
            {
                if (FoolGameService.gameState != GameState.Finished)
                {
                    await Task.Delay(500);
                    StartTurn();
                }
            }
        }

        RefreshStartButtonText();
        StateHasChanged();
    }

    private void RefreshPlayButtonName()
    {
        if (FoolGameService.Player.IsAttack)
        {
            if (FoolGameService.AttackingCards.Count == 0)
                PlayButton = "Походить";
            else
                PlayButton = "Подкинуть";
        }
        else
        {
            PlayButton = "Отбиться";
        }
    }

    private void StartTurn()
    {
        if (FoolGameService.gameState == GameState.Finished)
        {
            var count = FoolGameService.CountOfGames;
            FoolGameService.LoadGame();
            FoolGameService.CountOfGames += count;
        }

        RefreshPlayButtonName();

        FoolGameService.gameState = GameState.InProgress;

        RefreshStartButtonText();

        if (!FoolGameService.Player.IsAttack)
        {
            Card attackingCard = FoolGameService.Opponent.Attack(FoolGameService.Table);

            if (attackingCard.ImageUrl != "")
            {
                FoolGameService.AttackingCards.Add(attackingCard);
            }

            FoolGameService.Player.RefreshPlayableForBeat(attackingCard);
        }
        else
        {
            FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);
        }
    }
    private async Task Play()
    {
        FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);

        RefreshPlayButtonName();

        @* await FoolGameService.Turn();

        if(FoolGameService.TurnFinished)
        {
            await EndTurn();
        } *@

        if (FoolGameService.Player.IsAttack && FoolGameService.Opponent.inHand.Count != 0)
        {
            if (FoolGameService.FirstTurn && FoolGameService.Table.Length() == 10)
            {
                FoolGameService.FirstTurn = false;
                await EndTurn();
            }

            Card attackingCard = FoolGameService.Player.Attack(FoolGameService.Table);

            if (attackingCard.ImageUrl != "")
            {
                FoolGameService.AttackingCards.Add(attackingCard);

                RefreshPlayButtonName();
                StateHasChanged();

                await Task.Delay(500);

                Card defendingCard = FoolGameService.Opponent.Defend(attackingCard, FoolGameService.Table);

                if (defendingCard.ImageUrl != "")
                {

                    FoolGameService.DefendingCards.Add(defendingCard);
                }
            }

            FoolGameService.Player.RefreshPlayableForAttack(FoolGameService.Table);

            if (FoolGameService.Opponent.Taken)
            {
                await EndTurn();
                FoolGameService.Opponent.IsAttack = false;
                FoolGameService.Player.IsAttack = true;
            }
        }
        else
        {
            if (FoolGameService.Table.Length() == 0 || FoolGameService.Table.Length() % 2 == 1)
            {
                Card attackingCard = FoolGameService.AttackingCards.Last();

                if (attackingCard.ImageUrl != "")
                {
                    Card defendingCard = FoolGameService.Player.Defend(attackingCard, FoolGameService.Table);

                    if (defendingCard.ImageUrl != "")
                    {
                        FoolGameService.DefendingCards.Add(defendingCard);
                    }
                }

                FoolGameService.Player.RefreshPlayableForBeat(attackingCard);
            }

            if (FoolGameService.FirstTurn && FoolGameService.Table.Length() == 10)
            {
                FoolGameService.FirstTurn = false;
                await EndTurn();
            }

            if (FoolGameService.Table.Length() % 2 == 0
            && FoolGameService.Table.Length() != 12
            && FoolGameService.Player.inHand.Count != 0
            && !FoolGameService.Player.Taken)
            {
                Card attackingCard = FoolGameService.Opponent.Attack(FoolGameService.Table);

                await Task.Delay(500);

                if (attackingCard.ImageUrl != "")
                {
                    FoolGameService.AttackingCards.Add(attackingCard);
                }

                FoolGameService.Player.RefreshPlayableForBeat(attackingCard);
            }

            if (FoolGameService.Player.Taken)
            {
                FoolGameService.Opponent.IsAttack = true;
                FoolGameService.Player.IsAttack = false;
            }

        }
    }
}