@page "/register"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject FoolDataManager DataManager

<div class="register-form">

    <EditForm Model="@registerModel" FormName="RegisterForm" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />

        <h3>Регистрация</h3>
        <div class="login">
            <p>Логин: <br />
                <InputText id="login" Placeholder="Логин" @bind-Value="registerModel.Login" />
                <ValidationMessage For="@(() => registerModel.Login)" />
            </p>
        </div>
        <div class="password">
            <p>Пароль:<br />
                <InputText id="password" type="password" Placeholder="Пароль" @bind-Value="registerModel.Password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </p>
        </div>
        <div class="confirm-password">
            <p>Подтверждение:<br />
                <InputText id="confirm-password" type="password" Placeholder="Подтвердите пароль"
                    @bind-Value="registerModel.ConfirmPassword" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </p>
        </div>
        <button type="submit">Зарегистрироваться</button>

    </EditForm>

    <ConfirmDialog Show="LoginNotPassed" OnOK="ToggleLoginChange">
        <h3>Логин уже используется. Выберите другой, пожалуйста.</h3>
    </ConfirmDialog>
</div>


@code {
    [SupplyParameterFromForm(FormName = "RegisterForm")]
    private RegisterModel registerModel { get; set; } = new();
    private ApplicationUser? newUser;
    private List<ApplicationUser>? users;
    private bool LoginNotPassed = false;
    private void ToggleLoginChange()
    {
        LoginNotPassed = !LoginNotPassed;
    }
    private async Task HandleRegister()
    {
        CheckLoginExistense();

        if (!LoginNotPassed)
        {
            if (newUser is null)
            {

                newUser = new ApplicationUser
                    {
                        Login = registerModel.Login,
                        IsLoggedIn = true,
                        Password = registerModel.Password,
                        LastEnteredTime = DateTime.Now
                    };

                try
                {
                    await DataManager.AddUserAsync(newUser);
                    Console.WriteLine("IsRegistered");
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error line 54\n" + e.Message);
                }

            }

            @* LoggedInUserModel user = new LoggedInUserModel(1, newUser.Login);

            var claims = user.ToClaims();
            var identity = new ClaimsIdentity(claims, GameConstants.AUTH_SCHEME);
            var principal = new ClaimsPrincipal(identity);

            var authProperties = new AuthenticationProperties
                {
                    IsPersistent = false
                };

            Console.WriteLine($"Login: {newUser.Login}\nPasssword: {newUser.Password}");

            await HttpContext.SignInAsync(GameConstants.AUTH_SCHEME, principal, authProperties); *@
            NavigationManager.NavigateTo("/thefool");
        }
    }

    private void CheckLoginExistense()
    {
        if (users is not null)
        {
            foreach (var user in users)
            {
                if (registerModel.Login == user.Login)
                {
                    LoginNotPassed = true;
                    break;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (users is null)
        {
            try
            {
                users = await DataManager.GetAllUsersAsync();
            }
            catch (Exception e)
            {
                Console.WriteLine("Error Register.razor line 89\n" + e.Message);
            }
        }
    }
}
