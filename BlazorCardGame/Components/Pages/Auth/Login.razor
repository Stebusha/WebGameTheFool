@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication

@inject DataManager DataManager
@inject NavigationManager NavigationManager

<PageTitle>Вход</PageTitle>

<div class="login-form">

    <EditForm id="login-form" Model="@User" OnValidSubmit="LoginUserAsync" FormName="@LOGIN_FORM">
        <DataAnnotationsValidator />

        <h3>Вход</h3>
        <div class="login">
            <p>
                Логин: <br />
                <InputText id="login" placeholder="Логин" @bind-Value="User.Login" />
                <ValidationMessage For="@(() => User.Login)" />
            </p>
        </div>
        <div class="password">
            <p>
                Пароль:<br />
                <InputText id="password" type="password" placeholder="Пароль" @bind-Value="User.Password" />
                <ValidationMessage For="@(() => User.Password)" />
            </p>
        </div>
        <div class="remember-me">
            <InputCheckbox id="remeber-me" @bind-Value="User.RememberMe" class="form-check-input" />
            Запомнить?
        </div>
        <div class="to-register">
            <a href="/register" @onclick="ToRegister">Зарегистрироваться?</a>
        </div>
        <button type="submit">Войти</button>
    </EditForm>
</div>

@if (NeedRegistration)
{
    <br />
    <hr />
    <h3>Проверьте правильность введенных данных или зарегистрируйтесь.</h3>

}

@code {
    private const string LOGIN_FORM = "login-form";
    private bool NeedRegistration { get; set; } = false;

    [SupplyParameterFromForm(FormName = LOGIN_FORM)]
    private LoginModel User { get; set; } = new();

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    private List<ApplicationUser>? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await DataManager.GetAllUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine("Error Login.razor line 71 \n" + e.Message);
        }

        await base.OnInitializedAsync();
    }

    private void ToRegister()
    {
        NeedRegistration = false;
        @* Console.WriteLine("Переходим на страницу регистрации");
        NavigationManager.NavigateTo("/register"); *@
    }
    private async Task LoginUserAsync()
    {
        await Task.Delay(500);

        if (users is not null)
        {
            bool existed = false;

            foreach (var user in users)
            {
                user.IsLoggedIn = false;
            }

            foreach (var us in users)
            {

                if (us.Login == User.Login && us.Password == User.Password)
                {
                    existed = true;

                    us.LastEnteredTime = DateTime.Now;
                    us.IsLoggedIn = true;

                    try
                    {
                        await DataManager.UpdateUserAsync(us);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }

                    LoggedInUserModel user = new LoggedInUserModel(1, User.Login);

                    var claims = user.ToClaims();
                    var identity = new ClaimsIdentity(claims, Constants.AUTH_SCHEME);
                    var principal = new ClaimsPrincipal(identity);

                    var authProperties = new AuthenticationProperties
                        {
                            IsPersistent = User.RememberMe
                        };

                    Console.WriteLine($"Login: {User.Login}\nPasssword: {User.Password}");

                    await HttpContext.SignInAsync(Constants.AUTH_SCHEME, principal, authProperties);

                    NavigationManager.NavigateTo("/thefool");
                }
            }

            if (!existed)
            {
                NeedRegistration = true;
            }
        }
        else
        {
            NeedRegistration = true;
        }
    }
}