@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication

@inject DataManager DataManager
@inject NavigationManager NavigationManager

<PageTitle>Вход</PageTitle>

@if (!NeedRegistration)
{
    <div class="login-form">

        <EditForm id="login-form" Model="@User" OnValidSubmit="LoginUserAsync" FormName="@LOGIN_FORM">
            <DataAnnotationsValidator />

            <h3>Вход</h3>
            <div class="login">
                <p>
                    Логин: <br />
                    <InputText id="login" placeholder="Логин" @bind-Value="User.Login" />
                    <ValidationMessage For="@(() => User.Login)" />
                </p>
            </div>
            <div class="password">
                <p>
                    Пароль:<br />
                    <InputText id="password" type="password" placeholder="Пароль" @bind-Value="User.Password" />
                    <ValidationMessage For="@(() => User.Password)" />
                </p>
            </div>
            <div class="remember-me">
                <InputCheckbox id="remeber-me" @bind-Value="User.RememberMe" class="form-check-input" />
                Запомнить?
            </div>
            @* <div class="to-register">
                <a href="/register" @onclick="ToRegister">Зарегистрироваться?</a>
            </div> *@
            <button type="submit">Войти</button>
        </EditForm>
    </div>
}
else
{
    @* <ConfirmDialog Show="NeedRegistration" OnOK="ToRegister">
        <h3>Чтобы продолжить, необходимо зарегистрироваться. Перейти?</h3>
    </ConfirmDialog> *@
}



@code {
    private const string LOGIN_FORM = "login-form";
    private bool NeedRegistration { get; set; } = false;

    [SupplyParameterFromForm(FormName = LOGIN_FORM)]
    private ApplicationUser User { get; set; } = new();

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    private List<ApplicationUser>? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await DataManager.GetAllUsersAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        await base.OnInitializedAsync();
    }

    private void ToRegister()
    {
        NeedRegistration = false;
        Console.WriteLine("Переходи на страницу регистрации");
        NavigationManager.NavigateTo("/register", true);
    }
    private async Task LoginUserAsync()
    {
        await Task.Delay(2000);

        if (users is not null)
        {
            bool existed = false;

            foreach (var us in users)
            {
                if (us.Login == User.Login && us.Password == User.Password)
                {
                    existed = true;

                    us.LastEnteredTime = DateTime.Now;

                    try
                    {
                        await DataManager.UpdateUserAsync(us);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.Message);
                    }

                    LoggedInUserModel user = new LoggedInUserModel(1, User.Login);

                    var claims = user.ToClaims();
                    var identity = new ClaimsIdentity(claims, Constants.AUTH_SCHEME);
                    var principal = new ClaimsPrincipal(identity);

                    var authProperties = new AuthenticationProperties
                        {
                            IsPersistent = User.RememberMe
                        };

                    Console.WriteLine($"Login: {User.Login}\nPasssword: {User.Password}");



                    await HttpContext.SignInAsync(Constants.AUTH_SCHEME, principal, authProperties);

                    NavigationManager.NavigateTo("/thefool");

                    break;
                }
            }

            if (!existed)
            {
                NeedRegistration = true;
            }
        }
        else
        {
            NeedRegistration = true;
        }
    }
}